AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sleep Quality Advisor - Backend

Parameters:
  IngestSharedSecretName:
    Type: String
    Default: ingest/shared/secret
    Description: Secrets Manager secret name for the shared secret used by the authorizer
  FitbitRefreshSecretName:
    Type: String
    Default: fitbit/refresh/token
  FitbitClientSecretName:
    Type: String
    Default: fitbit/client/secret
  FitbitClientIdParamName:
    Type: String
    Default: fitbit/client/id
  FitbitCodeVerifierSecretName:
    Type: String
    Default: fitbit/code/verifier
  ScheduleExpression:
    Type: String
    Default: cron(10 7 * * ? *) # 07:10 UTC daily

Globals:
  Function:
    Runtime: python3.12
    Timeout: 30
    MemorySize: 256
    Tracing: Active
    Architectures:
      - arm64
    Environment:
      Variables:
        ENV_READINGS_TABLE: !Ref EnvReadingsTable
        SLEEP_SESSIONS_TABLE: !Ref SleepSessionsTable
        INGEST_SHARED_SECRET_NAME: !Ref IngestSharedSecretName
    Layers: []

Resources:
  # DynamoDB tables
  EnvReadingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: day
          AttributeType: S
        - AttributeName: ts_min
          AttributeType: N
      KeySchema:
        - AttributeName: day
          KeyType: HASH
        - AttributeName: ts_min
          KeyType: RANGE
      SSESpecification:
        SSEEnabled: true

  SleepSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sleepDate
          AttributeType: S
        - AttributeName: segmentStart
          AttributeType: S
      KeySchema:
        - AttributeName: sleepDate
          KeyType: HASH
        - AttributeName: segmentStart
          KeyType: RANGE
      SSESpecification:
        SSEEnabled: true

  # Bootstrap: Fitbit related secrets and parameters with default values
  FitbitRefreshSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref FitbitRefreshSecretName
      Description: Refresh token for Fitbit OAuth flow
      SecretString: "<empty>"

  FitbitClientSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref FitbitClientSecretName
      Description: Fitbit API client secret
      SecretString: "<empty>"

  FitbitCodeVerifierSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref FitbitCodeVerifierSecretName
      Description: Temporary PKCE code_verifier storage for Fitbit authorization
      SecretString: "<empty>"

  FitbitClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Ref FitbitClientIdParamName
      Type: String
      Value: "<empty>"

  # SQS Queues
  EnvIngestDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days

  EnvIngestQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EnvIngestDLQ.Arn
        maxReceiveCount: 5

  # Lambda: SQS Consumer -> DynamoDB writer
  EnvIngestConsumer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: env_ingest_consumer/handler.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt EnvReadingsTable.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EnvIngestQueue.Arn
            BatchSize: 10
            Enabled: true
            FunctionResponseTypes: ReportBatchItemFailures

  # Lambda: Authorizer for API Gateway to validate shared secret header
  EnvIngestAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: env_ingest_authorizer/handler.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: '*'

  # Fitbit callback Lambda
  FitbitCallback:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: fitbit_callback/handler.lambda_handler
      Environment:
        Variables:
          FITBIT_REFRESH_SECRET_NAME: !Ref FitbitRefreshSecretName
          FITBIT_CLIENT_SECRET_NAME: !Ref FitbitClientSecretName
          FITBIT_CLIENT_ID_PARAM_NAME: !Ref FitbitClientIdParamName
          FITBIT_CODE_VERIFIER_SECRET_NAME: !Ref FitbitCodeVerifierSecretName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:PutSecretValue
              Resource: !Ref FitbitRefreshSecretName
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: '*'
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: '*'
      Events:
        HttpCallback:
          Type: Api
          Properties:
            RestApiId: !Ref IngestApi
            Path: /fitbit/callback
            Method: GET
            Auth:
              Authorizer: NONE

  # Fitbit authorize Lambda (redirects to Fitbit OAuth with PKCE)
  FitbitAuthorize:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: fitbit_authorize/handler.lambda_handler
      Environment:
        Variables:
          FITBIT_CLIENT_ID_PARAM_NAME: !Ref FitbitClientIdParamName
          FITBIT_CODE_VERIFIER_SECRET_NAME: !Ref FitbitCodeVerifierSecretName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: '*'
            - Effect: Allow
              Action:
                - secretsmanager:PutSecretValue
              Resource: !Ref FitbitCodeVerifierSecretName
      Events:
        HttpAuthorize:
          Type: Api
          Properties:
            RestApiId: !Ref IngestApi
            Path: /fitbit/authorize
            Method: GET
            Auth:
              Authorizer: NONE

  # Fitbit fetch Lambda (scheduled)
  FitbitFetch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: fitbit_fetch/handler.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          FITBIT_REFRESH_SECRET_NAME: !Ref FitbitRefreshSecretName
          FITBIT_CLIENT_SECRET_NAME: !Ref FitbitClientSecretName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: '*'
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt SleepSessionsTable.Arn
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: !Ref ScheduleExpression
            Enabled: true


  # API Gateway (REST) -> SQS with Lambda TOKEN authorizer via SAM Api Auth
  IngestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Auth:
        DefaultAuthorizer: IngestTokenAuth
        Authorizers:
          IngestTokenAuth:
            FunctionPayloadType: TOKEN
            FunctionArn: !GetAtt EnvIngestAuthorizer.Arn
            Identity:
              Headers:
                - X-Secret
              ValidationExpression: ".+"

  

  IngestResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref IngestApi
      ParentId: !GetAtt IngestApi.RootResourceId
      PathPart: ingest

  

  

  ApiGatewaySqsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGwSqsSend
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt EnvIngestQueue.Arn

  IngestPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref IngestApi
      ResourceId: !Ref IngestResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Credentials: !GetAtt ApiGatewaySqsRole.Arn
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${EnvIngestQueue.QueueName}
        RequestTemplates:
          application/json: |
            Action=SendMessage&MessageBody=$util.urlEncode($util.escapeJavaScript($input.body))
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  

Outputs:
  ApiUrl:
    Description: Base URL for the API stage
    Value: !Sub https://${IngestApi}.execute-api.${AWS::Region}.amazonaws.com/prod
